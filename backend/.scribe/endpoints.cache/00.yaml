## Autogenerated by Scribe. DO NOT MODIFY.

name: Autenticación
description: |-

  Endpoint responsable de manejar el proceso de registro de nuevos usuarios en la aplicación.
  Contiene el endpoint necesario para que los nuevos usuarios puedan crear una cuenta (register).
endpoints:
  -
    httpMethods:
      - POST
    uri: api/register
    metadata:
      groupName: Autenticación
      groupDescription: |-

        Endpoint responsable de manejar el proceso de registro de nuevos usuarios en la aplicación.
        Contiene el endpoint necesario para que los nuevos usuarios puedan crear una cuenta (register).
      subgroup: ''
      subgroupDescription: ''
      title: 'Registrar un nuevo usuario.'
      description: 'Crea una nueva cuenta de usuario con la información proporcionada.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'El nombre completo del usuario.'
        required: true
        example: 'Juan Pérez'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: 'El correo electrónico del usuario. Debe ser único.'
        required: true
        example: juan.perez@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'La contraseña del usuario (mínimo 8 caracteres por defecto de Laravel Password).'
        required: true
        example: s3cur3P@ssw0rd
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      birthdate:
        name: birthdate
        description: 'La fecha de nacimiento del usuario. Debe ser una fecha válida y el usuario debe tener al menos 12 años.'
        required: true
        example: 15/05/2001
        type: date
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: "Confirmación de la contraseña. Debe coincidir con 'password'."
        required: true
        example: s3cur3P@ssw0rd
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'Juan Pérez'
      email: juan.perez@example.com
      password: s3cur3P@ssw0rd
      birthdate: 15/05/2001
      password_confirmation: s3cur3P@ssw0rd
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "message": "Usuario registrado exitosamente.",
            "user": {
              "id": 1,
              "name": "Juan Pérez",
              "email": "juan.perez@example.com",
              "created_at": "2023-10-27T10:00:00.000000Z",
              "updated_at": "2023-10-27T10:00:00.000000Z"
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "Los datos proporcionados no son válidos.",
            "errors": {
              "email": [
                "El correo electrónico ya ha sido registrado."
              ],
              "password": [
                "La confirmación de contraseña no coincide."
              ],
              "birthdate": [
                "La fecha de nacimiento debe ser una fecha anterior o igual a 2012-10-27."
              ]
            }
          }
        headers: []
        description: 'Errores de Validación'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/login
    metadata:
      groupName: Autenticación
      groupDescription: |-

        Endpoints para iniciar sesión (login) y cerrar sesión (logout), facilitando 
        así el acceso seguro y la gestión de sesiones dentro de la aplicación.
      subgroup: ''
      subgroupDescription: ''
      title: 'Autenticar usuario y obtener token API.'
      description: |-
        Procesa las credenciales del usuario (email y contraseña)
        y, si son correctas, retorna un token de acceso tipo Bearer.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'El correo electrónico del usuario.'
        required: true
        example: usuario@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'La contraseña del usuario.'
        required: true
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      remember:
        name: remember
        description: 'Indica si se debe recordar la sesión (opcional).'
        required: false
        example: true
        type: boolean
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      email: usuario@example.com
      password: password123
      remember: true
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Login exitoso.",
          "access_token": "TU_TOKEN_AQUI",
          "token_type": "Bearer"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
          "message": "Las credenciales proporcionadas son incorrectas.",
          "errors": {
          "email": [
          "Las credenciales proporcionadas son incorrectas."
          ]
          }
          }
        headers: []
        description: 'Credenciales Incorrectas o Usuario No Encontrado'
        custom: []
      -
        status: 422
        content: |-
          {
          "message": "Demasiados intentos de login. Por favor, inténtalo de nuevo en :seconds segundos.",
          "errors": {
          "email": [
          "Demasiados intentos de login. Por favor, inténtalo de nuevo en 60 segundos."
          ]
          }
          }
        headers: []
        description: 'Demasiados Intentos de Login'
        custom: []
      -
        status: 422
        content: |-
          {
          "message": "Los datos proporcionados no son válidos.",
          "errors": {
          "email": [
          "El formato del correo electrónico no es válido."
          ]
          }
          }
        headers: []
        description: 'Errores de Validación de Entrada'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/logout
    metadata:
      groupName: Autenticación
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Cerrar sesión (revocar token API actual).'
      description: |-
        Cierra la sesión del usuario autenticado revocando el token API
        que se utilizó para hacer esta petición.
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "message": "Sesión cerrada exitosamente."
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
          "message": "Unauthenticated."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
